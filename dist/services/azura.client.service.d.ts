import { AzuraUserDto } from "src/dtos/azura/azura-user.dto";
import { rolesDto } from "src/dtos/azura/roles-dto";
import { createStationDto } from "../dtos/azura/create-data.station.dto";
import { Server } from "../entities/servers.model";
export declare class AzuraClientService {
    request<T>(data: T, method: "GET" | "POST" | "PUT" | "DELETE", endpoint: string, url: string, token: string): Promise<any>;
    createAzuraUser(User: AzuraUserDto, url: string, token: string): Promise<AzuraUserDto>;
    findAzuraUsers(url: string, token: string): Promise<AzuraUserDto[]>;
    findAzuraUser(id: string, url: string, token: string): Promise<AzuraUserDto>;
    updateAzuraUser(id: number | string, attrs: Partial<AzuraUserDto>, url: string, token: string): Promise<boolean>;
    removeAzuraUser(id: string, url: string, token: string): Promise<any>;
    addRole(azura_id: string, roles: string[], url: string, token: string): Promise<boolean>;
    setRole(Role: rolesDto, url: string, token: string): Promise<any>;
    findPermissions(url: string, token: string): Promise<any>;
    findRoles(url: string, token: string): Promise<any>;
    findRole(id: number | string, url: string, token: string): Promise<any>;
    updateRole(id: number | string, attrs: Partial<rolesDto>, url: string, token: string): Promise<any>;
    deleteRole(id: number | string, url: string, token: string): Promise<any>;
    createStation(createVideoStreamingData: createStationDto, url: string, token: string): Promise<any>;
    findStations(url: string, token: string): any;
    findStation(id: string, url: string, token: string): Promise<any>;
    findStationMount(id: string, url: string, token: string): any;
    updateStation(id: number | string, attrs: Partial<createStationDto>, url: string, token: string): Promise<any>;
    deleteStation(id: string, url: string, token: string): Promise<any>;
    purgeStations(url: string, token: string): any;
    purgeAllClient(url: string, token: string): any;
    updateStorage(id: string, storage: string, url: string, token: string): any;
    findStorage(id: string, url: string, token: string): any;
    stationServiceControl(station_id: string, action: "frontend/start" | "frontend/stop" | "frontend/restart" | "backend/start" | "backend/stop" | "backend/restart" | "restart" | "status", method: "POST" | "GET", url: string, token: string): Promise<any>;
    suspend(station_id: string, server: Server): Promise<any>;
    unsuspend(station_id: string, server: Server): Promise<any>;
}
